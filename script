// ==UserScript==
// @name         DALL-E 2 Image Downloader (with delay and stop button)
// @namespace    http://tampermonkey.net/
// @version      0.2
// @description  Batch download personal DALL-E 2 generated images with delay and stop functionality
// @match        https://labs.openai.com/*
// @grant        GM_download
// ==/UserScript==

(function() {
    'use strict';

    let processedImages = new Set();
    let isScrolling = false;
    let isDownloading = false;
    let stopDownloading = false;

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function downloadImage(url, filename) {
        return new Promise((resolve, reject) => {
            GM_download({
                url: url,
                name: filename,
                onload: () => {
                    console.log(`Downloaded: ${filename}`);
                    resolve();
                },
                onerror: (error) => {
                    console.error(`Error downloading ${filename}:`, error);
                    reject(error);
                }
            });
        });
    }

    function sanitizeFilename(name) {
        return name.replace(/[^a-z0-9]/gi, '_').toLowerCase();
    }

    async function processImages() {
        const images = document.querySelectorAll('.paginated-generations-item');
        for (let item of images) {
            if (stopDownloading) break;

            const img = item.querySelector('img[alt="Generated by DALLÂ·E"]');
            const title = item.querySelector('.image-prompt-overlay h4');
            if (img && title && !processedImages.has(img.src)) {
                const filename = `${sanitizeFilename(title.textContent)}.webp`;
                await downloadImage(img.src, filename);
                processedImages.add(img.src);
                await sleep(100); // 0.1 second delay between downloads
            }
        }
    }

    async function scrollToBottom() {
        if (isScrolling || stopDownloading) return;
        isScrolling = true;
        const scrollHeight = Math.max(
            document.body.scrollHeight, document.documentElement.scrollHeight,
            document.body.offsetHeight, document.documentElement.offsetHeight,
            document.body.clientHeight, document.documentElement.clientHeight
        );
        window.scrollTo(0, scrollHeight);
        await sleep(2000);
        isScrolling = false;
        if (document.body.scrollHeight > scrollHeight && !stopDownloading) {
            await processImages();
            await scrollToBottom();
        } else if (!stopDownloading) {
            console.log("Finished downloading all images.");
            isDownloading = false;
            updateButtonStates();
        }
    }

    function addButtons() {
        const buttonContainer = document.createElement('div');
        buttonContainer.style.position = 'fixed';
        buttonContainer.style.top = '10px';
        buttonContainer.style.right = '10px';
        buttonContainer.style.zIndex = '9999';

        const startButton = document.createElement('button');
        startButton.textContent = 'Start Download';
        startButton.onclick = startDownload;
        buttonContainer.appendChild(startButton);

        const stopButton = document.createElement('button');
        stopButton.textContent = 'Stop Download';
        stopButton.onclick = stopDownload;
        stopButton.style.marginLeft = '10px';
        buttonContainer.appendChild(stopButton);

        document.body.appendChild(buttonContainer);

        return { startButton, stopButton };
    }

    const { startButton, stopButton } = addButtons();

    function updateButtonStates() {
        startButton.disabled = isDownloading;
        stopButton.disabled = !isDownloading;
    }

    async function startDownload() {
        if (isDownloading) return;
        isDownloading = true;
        stopDownloading = false;
        updateButtonStates();
        await processImages();
        await scrollToBottom();
    }

    function stopDownload() {
        stopDownloading = true;
        isDownloading = false;
        updateButtonStates();
        console.log("Stopping download after current image...");
    }

    updateButtonStates();
})();
